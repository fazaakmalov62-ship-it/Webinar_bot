import telebot
from telebot import types
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ Render –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ.")

ADMIN_ID = int(os.environ.get("ADMIN_ID", "1309971729"))
FILE_NAME = "webinar_registrations.xlsx"
RENDER_APP_NAME = os.environ.get("RENDER_APP_NAME")  # –Ω–∞–ø—Ä–∏–º–µ—Ä webinar-bot-1juu

bot = telebot.TeleBot(BOT_TOKEN)

# === –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª Excel, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ===
if not os.path.exists(FILE_NAME):
    wb = Workbook()
    ws = wb.active
    ws.append(["–ù–∏–∫–Ω–µ–π–º", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "ID TG", "–ò–º—è", "–°—Ç–∞—Ç—É—Å"])
    wb.save(FILE_NAME)

# === Flask ===
app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return "Bot server is running", 200

# === Webhook endpoint —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    print("Incoming update:", json_str)
    if not json_str:
        return "no data", 400
    try:
        update = telebot.types.Update.de_json(json_str)
        bot.process_new_updates([update])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ø–¥–µ–π—Ç–∞:", e)
    return "ok", 200

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===
@bot.message_handler(commands=['start'])
def start(message):
    try:
        print(f"Start command received from {message.from_user.id}")
        user_id = message.from_user.id
        wb = load_workbook(FILE_NAME)
        ws = wb.active

        found = False
        for i in range(2, ws.max_row + 1):
            if ws.cell(row=i, column=3).value == user_id:
                found = True
                name = ws.cell(row=i, column=4).value or "‚Äî"
                status = ws.cell(row=i, column=5).value or ""
                break

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä"))
        markup.add(types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"))
        markup.add(types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞"))

        if found:
            bot.send_message(message.chat.id,
                             f"üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ò–º—è: {name}\n–°—Ç–∞—Ç—É—Å: {status}",
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id,
                             "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä:",
                             reply_markup=markup)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ /start:", e)

# === –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã (–æ–±—ë—Ä–Ω—É—Ç—ã –≤ try/except –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ) ===
@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä")
def register_step1(message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "‚Äî"
        reg_time = datetime.now().strftime("%Y-%m-%d %H:%M")

        wb = load_workbook(FILE_NAME)
        ws = wb.active

        found = False
        for i in range(2, ws.max_row + 1):
            if ws.cell(row=i, column=3).value == user_id:
                ws.cell(row=i, column=1, value=username)
                ws.cell(row=i, column=2, value=reg_time)
                found = True
                break

        if not found:
            ws.append([username, reg_time, user_id, "", ""])
            try:
                bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: @{username} ({user_id})")
            except Exception:
                pass

        wb.save(FILE_NAME)

        bot.send_message(message.chat.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        bot.register_next_step_handler(message, register_step2)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ register_step1:", e)

def register_step2(message):
    try:
        name = message.text
        user_id = message.from_user.id

        wb = load_workbook(FILE_NAME)
        ws = wb.active
        for i in range(2, ws.max_row + 1):
            if ws.cell(row=i, column=3).value == user_id:
                ws.cell(row=i, column=4, value=name)
                ws.cell(row=i, column=5, value="")  
                break
        wb.save(FILE_NAME)

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞"))
        markup.add(types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"))
        bot.send_message(message.chat.id,
                         "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                         reply_markup=markup)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ register_step2:", e)

@bot.message_handler(func=lambda msg: msg.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞")
def cancel_registration(message):
    try:
        user_id = message.from_user.id
        wb = load_workbook(FILE_NAME)
        ws = wb.active
        for i in range(2, ws.max_row + 1):
            if ws.cell(row=i, column=3).value == user_id:
                ws.cell(row=i, column=5, value="–û—Ç–∫–∞–∑–∞–ª—Å—è")
                break
        wb.save(FILE_NAME)
        bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ cancel_registration:", e)

@bot.message_handler(func=lambda msg: msg.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def update_data(message):
    try:
        register_step1(message)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ update_data:", e)

@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    try:
        if message.from_user.id != ADMIN_ID:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
        bot.register_next_step_handler(msg, send_broadcast)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ broadcast:", e)

def send_broadcast(message):
    try:
        text = message.text
        wb = load_workbook(FILE_NAME)
        ws = wb.active
        sent = 0
        for i in range(2, ws.max_row + 1):
            user_id = ws.cell(row=i, column=3).value
            status = ws.cell(row=i, column=5).value
            if status != "–û—Ç–∫–∞–∑–∞–ª—Å—è":
                try:
                    bot.send_message(user_id, text)
                    sent += 1
                except Exception:
                    continue
        bot.send_message(message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤ send_broadcast:", e)

# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
if RENDER_APP_NAME:
    WEBHOOK_URL = f"https://{RENDER_APP_NAME}.onrender.com/{BOT_TOKEN}"
    try:
        bot.remove_webhook()
        ok = bot.set_webhook(url=WEBHOOK_URL)
        print("set_webhook result:", ok, "WEBHOOK_URL:", WEBHOOK_URL)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:", e)
else:
    print("RENDER_APP_NAME –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    if os.environ.get("LOCAL_TEST"):
        print("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (LOCAL_TEST).")
        bot.infinity_polling()
    else:
        port = int(os.environ["PORT"])
        app.run(host="0.0.0.0", port=port, threaded=True)
