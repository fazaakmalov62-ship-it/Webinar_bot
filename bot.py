import telebot
from telebot import types
from openpyxl import Workbook, load_workbook
from datetime import datetime
import os
from flask import Flask, request

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.environ.get("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.environ.get("ADMIN_ID", "1309971729"))  # ID –∞–¥–º–∏–Ω–∞ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏
FILE_NAME = "webinar_registrations.xlsx"

bot = telebot.TeleBot(BOT_TOKEN)

# === –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª Excel, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ===
if not os.path.exists(FILE_NAME):
    wb = Workbook()
    ws = wb.active
    ws.append(["–ù–∏–∫–Ω–µ–π–º", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "ID TG", "–ò–º—è", "–°—Ç–∞—Ç—É—Å"])
    wb.save(FILE_NAME)

# === –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    wb = load_workbook(FILE_NAME)
    ws = wb.active

    found = False
    for i in range(2, ws.max_row + 1):
        if ws.cell(row=i, column=3).value == user_id:
            found = True
            name = ws.cell(row=i, column=4).value or "‚Äî"
            status = ws.cell(row=i, column=5).value or ""
            break

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä"))
    markup.add(types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"))
    markup.add(types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞"))

    if found:
        bot.send_message(message.chat.id,
                         f"üëã –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ò–º—è: {name}\n–°—Ç–∞—Ç—É—Å: {status}",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä:",
                         reply_markup=markup)

# === –ù–∞–∂–∞—Ç–∏–µ ¬´–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä¬ª ===
@bot.message_handler(func=lambda msg: msg.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä")
def register_step1(message):
    user_id = message.from_user.id
    username = message.from_user.username or "‚Äî"
    reg_time = datetime.now().strftime("%Y-%m-%d %H:%M")

    wb = load_workbook(FILE_NAME)
    ws = wb.active

    found = False
    for i in range(2, ws.max_row + 1):
        if ws.cell(row=i, column=3).value == user_id:
            ws.cell(row=i, column=1, value=username)
            ws.cell(row=i, column=2, value=reg_time)
            found = True
            break

    if not found:
        ws.append([username, reg_time, user_id, "", ""])
        bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: @{username} ({user_id})")

    wb.save(FILE_NAME)

    bot.send_message(message.chat.id, "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    bot.register_next_step_handler(message, register_step2)

# === –ü–æ–ª—É—á–∞–µ–º –∏–º—è ===
def register_step2(message):
    name = message.text
    user_id = message.from_user.id

    wb = load_workbook(FILE_NAME)
    ws = wb.active
    for i in range(2, ws.max_row + 1):
        if ws.cell(row=i, column=3).value == user_id:
            ws.cell(row=i, column=4, value=name)
            ws.cell(row=i, column=5, value="")  
            break
    wb.save(FILE_NAME)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞"))
    markup.add(types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"))
    bot.send_message(message.chat.id,
                     "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
                     reply_markup=markup)

# === –û—Ç–∫–∞–∑ –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞ ===
@bot.message_handler(func=lambda msg: msg.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞")
def cancel_registration(message):
    user_id = message.from_user.id

    wb = load_workbook(FILE_NAME)
    ws = wb.active
    for i in range(2, ws.max_row + 1):
        if ws.cell(row=i, column=3).value == user_id:
            ws.cell(row=i, column=5, value="–û—Ç–∫–∞–∑–∞–ª—Å—è")
            break
    wb.save(FILE_NAME)
    bot.send_message(message.chat.id, "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –≤–µ–±–∏–Ω–∞—Ä–∞. –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")

# === –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ===
@bot.message_handler(func=lambda msg: msg.text == "–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
def update_data(message):
    register_step1(message)
# === –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ===
@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    bot.register_next_step_handler(msg, send_broadcast)

def send_broadcast(message):
    text = message.text
    wb = load_workbook(FILE_NAME)
    ws = wb.active
    sent = 0
    for i in range(2, ws.max_row + 1):
        user_id = ws.cell(row=i, column=3).value
        status = ws.cell(row=i, column=5).value
        if status != "–û—Ç–∫–∞–∑–∞–ª—Å—è":
            try:
                bot.send_message(user_id, text)
                sent += 1
            except:
                continue
    bot.send_message(message.chat.id, f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# === Flask + Webhook ===
app = Flask(__name__)

WEBHOOK_URL = f"https://{os.environ.get('RENDER_APP_NAME')}.onrender.com/{BOT_TOKEN}"

try:
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞:", e)

@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "ok", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))



